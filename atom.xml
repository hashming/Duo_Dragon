<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/hashming/Duo_Dragon</id>
    <title>Duo_Dragon</title>
    <updated>2020-08-18T04:18:16.048Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/hashming/Duo_Dragon"/>
    <link rel="self" href="https://github.com/hashming/Duo_Dragon/atom.xml"/>
    <subtitle>想不想变强？</subtitle>
    <logo>https://github.com/hashming/Duo_Dragon/images/avatar.png</logo>
    <icon>https://github.com/hashming/Duo_Dragon/favicon.ico</icon>
    <rights>All rights reserved 2020, Duo_Dragon</rights>
    <entry>
        <title type="html"><![CDATA[guacamole搭建（原生）]]></title>
        <id>https://github.com/hashming/Duo_Dragon/post/guacamole-da-jian-yuan-sheng/</id>
        <link href="https://github.com/hashming/Duo_Dragon/post/guacamole-da-jian-yuan-sheng/">
        </link>
        <updated>2020-08-18T01:44:12.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://github.com/hashming/Duo_Dragon/post-images/1597715398409.png" alt="" loading="lazy">😁</p>
<p>Apache Guacamole 是一款 HTML5 应用程序，可通过 RDP，VNC 和其他协议访问远程桌面。您可以创建一个虚拟云桌面，用户通过 Web 浏览器即可访问。本指南将介绍如何通过 Docker 安装 Apache Guacamole，并借助其访问托管在 Linode 上的远程桌面。<br>
安装 Docker<br>
这里介绍的方法将安装最新版本的 Docker。如需安装特定版本 Docker，或需要 Docker EE 环境，请参阅官方文档寻求帮助。<br>
以下步骤将使用 Ubuntu 官方软件库安装 Docker 社区版（Community Edition，CE）。如需在其他 Linux 发行版上安装，请参阅官网的安装说明。</p>
<ol>
<li>卸载系统上可能存在的旧版本 Docker：<br>
sudo apt remove docker docker-engine docker.io</li>
<li>确保您已安装了使用 Docker 仓库所需的如下依赖：<br>
sudo apt install apt-transport-https ca-certificates curl software-properties-common</li>
<li>添加 Docker 的 GPG 密钥：<br>
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</li>
<li>验证 GPG 密钥指纹：<br>
sudo apt-key fingerprint 0EBFCD88<br>
您应该看到类似以下内容的输出：<br>
pub   4096R/0EBFCD88 2017-02-22<br>
Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>
uid                  Docker Release (CE deb) <a href="mailto:docker@docker.com">docker@docker.com</a><br>
sub   4096R/F273FCD8 2017-02-22</li>
<li>添加 Dockerstable仓库：<br>
sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</li>
<li>更新软件包索引并安装 Docker 社区版：<br>
sudo apt update<br>
sudo apt install docker-ce</li>
<li>将受限的 Linux 用户账户添加到docker用户组：<br>
sudo usermod -aG docker exampleuser<br>
您需要重启 Shell 会话才能使此更改生效。</li>
<li>运行内置的 “Hello World” 程序以检查 Docker 是否成功安装：<br>
docker run hello-world<br>
使用 MySQL 初始化 Guacamole 身份验证<br>
本指南将使用 MySQL 作为参考，但 PostgreSQL 以及 MariaDB 也同样适用。</li>
<li>拉取 Guacamole 服务器、Guacamole 客户端和 MySQL 的 Docker 镜像：<br>
docker pull guacamole/guacamole<br>
docker pull guacamole/guacd<br>
docker pull mysql/mysql-server</li>
<li>创建数据库初始化脚本以创建用于验证身份的数据表：<br>
docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --mysql &gt; initdb.sql</li>
<li>为 MySQL 的 root 用户生成一次性密码，可在日志中查看：<br>
docker run --name example-mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes -e MYSQL_ONETIME_PASSWORD=yes -d mysql/mysql-server<br>
docker logs example-mysql<br>
Docker 日志会在终端中打印密码：<br>
[Entrypoint] Database initialized<br>
[Entrypoint] GENERATED ROOT PASSWORD: <password></li>
<li>重命名并将initdb.sql移动到 MySQL 容器中：<br>
docker cp initdb.sql example-mysql:/guac_db.sql</li>
<li>在 MySQL 的 Docker 容器中打开 bash 终端：<br>
docker exec -it example-mysql bash</li>
<li>使用一次性密码登录。在重新设定root用户密码之前，终端不会接受任何命令。创建一个新的数据库和用户，如下所示：<br>
bash-4.2# mysql -u root -p<br>
Enter password:<br>
Welcome to the MySQL monitor.  Commands end with ; or \g.<br>
Your MySQL connection id is 11<br>
Server version: 5.7.20<br>
Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.<br>
Oracle is a registered trademark of Oracle Corporation and/or its<br>
affiliates. Other names may be trademarks of their respective<br>
owners.<br>
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.<br>
mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_root_password';<br>
Query OK, 0 rows affected (0.00 sec)<br>
mysql&gt; CREATE DATABASE guacamole_db;<br>
Query OK, 1 row affected (0.00 sec)<br>
mysql&gt; CREATE USER 'guacamole_user'@'%' IDENTIFIED BY 'guacamole_user_password';<br>
Query OK, 0 rows affected (0.00 sec)<br>
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE ON guacamole_db.* TO 'guacamole_user'@'%';<br>
Query OK, 0 rows affected (0.00 sec)<br>
mysql&gt; FLUSH PRIVILEGES;<br>
Query OK, 0 rows affected (0.00 sec)<br>
mysql&gt; quit<br>
Bye</li>
<li>在 bash 终端中，使用初始化脚本为新数据库创建数据表：<br>
cat guac_db.sql | mysql -u root -p guacamole_db<br>
验证数据表是否已成功添加。如果guacamole数据库中不存在新建的表，请再次确认之前的步骤均已正确执行。<br>
mysql&gt; USE guacamole_db;<br>
Reading table information for completion of table and column names<br>
You can turn off this feature to get a quicker startup with -A<br>
Database changed<br>
mysql&gt; SHOW TABLES;<br>
+---------------------------------------+<br>
| Tables_in_guacamole_db                |<br>
+---------------------------------------+<br>
| guacamole_connection                  |<br>
| guacamole_connection_group            |<br>
| guacamole_connection_group_permission |<br>
| guacamole_connection_history          |<br>
| guacamole_connection_parameter        |<br>
| guacamole_connection_permission       |<br>
| guacamole_sharing_profile             |<br>
| guacamole_sharing_profile_parameter   |<br>
| guacamole_sharing_profile_permission  |<br>
| guacamole_system_permission           |<br>
| guacamole_user                        |<br>
| guacamole_user_password_history       |<br>
| guacamole_user_permission             |<br>
+---------------------------------------+<br>
13 rows in set (0.00 sec)<br>
退出 bash 终端：<br>
exit<br>
在浏览器中访问 Guacamole</li>
<li>在 Docker 中启动 guacd：<br>
docker run --name example-guacd -d guacamole/guacd</li>
<li>连接容器，以便 Guacamole 验证存储在 MySQL 数据库中的凭证：<br>
docker run --name example-guacamole --link example-guacd:guacd --link example-mysql:mysql -e MYSQL_DATABASE='guacamole_db' -e MYSQL_USER='guacamole_user' -e MYSQL_PASSWORD='guacamole_user_password' -d -p 127.0.0.1:8080:8080 guacamole/guacamole<br>
注意<br>
可通过以下命令查看所有正在运行和未运行的 Docker 容器：<br>
docker ps -a<br>
3.example-guacamole、example-guacd和example-mysql都已运行后，请在浏览器中访问localhost:8080/guacamole/。默认的登录账户是guacadmin，默认登录密码guacadmin。登录后应尽快修改登录账户及密码。<br>
在 Linode 上搭建 VNC 服务器<br>
在共享远程桌面之前，必须在 Linode 上安装桌面环境以及 VNC 服务器。本指南将使用 Xfce 桌面，因为 Xfce 是轻量级的，不会过度消耗系统资源。</li>
<li>在 Linode 上安装 Xfce：<br>
sudo apt install xfce4 xfce4-goodies<br>
如果系统资源的限制较少，则可使用 Unity 桌面作为替代：<br>
sudo apt install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal</li>
<li>安装 VNC 服务器。启动 VNC 服务器时，系统将提示用户输入密码：<br>
sudo apt install tightvncserver<br>
vncserver<br>
除了提示输入密码外，系统还会提供 “仅可查看” 的选项。密码最大长度为 8 位字符。对于需要更高安全性的设置，我们强烈建议您将 Guacamole 部署为使用 SSL 加密的反向代理。<br>
You will require a password to access your desktops.<br>
Password:<br>
Verify:<br>
Would you like to enter a view-only password (y/n)?</li>
<li>确保在.vnc/xstartup的最后启动桌面环境，否则只会显示灰色屏幕：<br>
echo 'startxfce4 &amp;' | tee -a .vnc/xstartup<br>
若使用 Unity 桌面作为替代，则配置示例如下：<br>
#!/bin/sh<br>
xrdb <span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 39: …ot -solid grey
#̲x-terminal-emul…'>HOME/.Xresources
xsetroot -solid grey
#x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;</span>VNCDESKTOP Desktop&quot; &amp;<br>
#x-window-manager &amp;</li>
</ol>
<h1 id="fix-to-make-gnome-work">Fix to make GNOME work</h1>
<p>export XKL_XMODMAP_DISABLE=1<br>
/etc/X11/Xsession<br>
gnome-panel &amp;<br>
gnome-settings-daemon &amp;<br>
metacity &amp;<br>
nautilus &amp;<br>
在 Guacamole 中新建连接<br>
Guacamole 支持 VNC，RDP，SSH 和 Telnet 协议。本章节将介绍如何在浏览器界面中添加新的连接。</p>
<ol>
<li>在连接到 VNC 服务器之前，创建一个 SSH 隧道，并将user和example.com替换为 Linode 的用户名和公网 IP：<br>
ssh -L 5901:localhost:5901 -N -f -l user example.com</li>
<li>在 Guacamole 控制面板中，点击右上角的下拉菜单，然后选择 Settings 。在 Connections 选项卡中，点击 New Connection 按钮。</li>
<li>在 Edit Connection 设置中，输入连接名。在 Parameters 设置中，主机名即为 Linode 的公网 IP 地址。端口号为 5900 + 显示编号——这里以 5901 为例。最后输入 8 位密码。<br>
官方文档详细描述了所有参数的具体含义。<br>
注意<br>
如果您在同一 Linode 服务器上有多个 VNC 连接，请增加连接所用的端口号：5902，5903…… 以此类推。如果您的远程连接托管在不同的 Linode 服务器上，则仍应继续使用 5901 端口。</li>
<li>在右上角的下拉菜单中，点击 Home。新建的连接现在应该已经可以使用。<br>
使用快捷键 CTRL + ALT + SHIFT 可以打开剪贴板、键盘 / 鼠标设置以及导航菜单。</li>
<li>点击浏览器的后退按钮，回到 Home 菜单。</li>
<li>可以连接至其他桌面，并且可在新的浏览器选项卡中同时连接多个远程桌面。<br>
本指南旨在通过 Docker 简化安装过程，并演示如何使用 Apache Guacamole 快速连接至远程桌面。除此之外 Apache Guacamole 还提供了许多功能，如屏幕录制、Duo 双重身份认证、SFTP 文件传输等。Guacamole 作为 Apache 的孵化项目，我们期待在不久的将来看到其进一步的发展。<br>
相关资料<br>
有关此主题的其他信息，您可能需要参考以下资源。虽然我们出于帮助您的目的提供了这些资料，但请注意我们无法保证这些站外资源的准确性与时效性。<br>
• Apache Guacamole<br>
• Apache Tomcat<br>
via.https://cloud.tencent.com/developer/article/1339957</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://github.com/hashming/Duo_Dragon/post/hello-gridea/</id>
        <link href="https://github.com/hashming/Duo_Dragon/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>